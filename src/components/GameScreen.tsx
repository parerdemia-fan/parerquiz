import type { GameSettings, DebugMode } from '../types';
// ÂÄ§„Å®„Åó„Å¶‰ΩøÁî®„Åô„Çã„ÇÇ„ÅÆ„ÅØÈÄöÂ∏∏„ÅÆ„Ç§„É≥„Éù„Éº„Éà
import { useState, useEffect } from 'react';
import { useGame } from '../hooks/useGame';
import { useBadges } from '../hooks/useBadges';
import { QuestionDisplay } from './QuestionDisplay';
import { AnswerOptions } from './AnswerOptions';

interface GameScreenProps {
  settings: GameSettings;
  onBackToTitle: () => void;
  debugMode?: DebugMode | null;
}

export const GameScreen: React.FC<GameScreenProps> = ({
  settings,
  onBackToTitle,
  debugMode
}) => {
  const { gameState, answerQuestion, nextQuestion, restartGame, debugForceFinish, isAdvancedMode } = useGame(settings);
  const { earnBadge, reloadBadges } = useBadges();
  const [newBadgeEarned, setNewBadgeEarned] = useState<boolean>(false);
  const [badgeAnimationKey, setBadgeAnimationKey] = useState<number>(0);

  // „Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâÁî®„ÅÆÂº∑Âà∂ÁµÇ‰∫ÜÂá¶ÁêÜ
  useEffect(() => {
    if (debugMode && gameState.questions.length > 0 && !gameState.gameFinished) {
      debugForceFinish(debugMode.correctAnswers, debugMode.totalQuestions);
    }
  }, [debugMode, gameState.questions.length, gameState.gameFinished, debugForceFinish]);

  // „Ç≤„Éº„É†ÁµÇ‰∫ÜÊôÇ„ÅÆ„Éê„ÉÉ„Ç∏ÂèñÂæóÂá¶ÁêÜ
  useEffect(() => {
    if (gameState.gameFinished) {
      const totalQuestions = gameState.debugForceFinish?.totalQuestions || gameState.totalQuestions;
      const correctAnswers = gameState.debugForceFinish?.correctAnswers || gameState.correctAnswers;
      const correctRate = correctAnswers / totalQuestions;

      // 100%Ê≠£Ëß£„ÅÆÂ†¥Âêà„ÅÆ„Åø„Éê„ÉÉ„Ç∏„ÇíÂèñÂæó
      if (correctRate === 1.0) {
        const badgeEarned = earnBadge(settings.dormitory, settings.difficulty);
        if (badgeEarned) {
          setNewBadgeEarned(true);
          setBadgeAnimationKey(prev => prev + 1);
          
          // „Éê„ÉÉ„Ç∏Áä∂ÊÖã„ÇíÂç≥Â∫ß„Å´ÂÜçË™≠„ÅøËæº„Åø
          setTimeout(() => {
            reloadBadges();
          }, 100);
          
          // 4ÁßíÂæå„Å´„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„ÇíÈùûË°®Á§∫
          setTimeout(() => {
            setNewBadgeEarned(false);
          }, 4000);
        }
      }
    }
  }, [gameState.gameFinished, gameState.debugForceFinish, gameState.totalQuestions, gameState.correctAnswers, settings.dormitory, settings.difficulty, earnBadge, reloadBadges]);

  // Ëá™ÂãïÈÄ≤Ë°å„ÅÆ„Åü„ÇÅ„ÅÆuseEffect
  useEffect(() => {
    if (!gameState.isAnswered) return;

    const currentQ = gameState.questions[gameState.currentQuestion];
    const selectedOption = currentQ?.options[gameState.selectedAnswer!];
    const isCorrect = selectedOption?.studentId === currentQ?.correctTalent.studentId;
    
    // Ê≠£Ëß£„Å™„Çâ1.5Áßí„ÄÅ‰∏çÊ≠£Ëß£„Å™„Çâ3ÁßíÂæå„Å´Ê¨°„ÅÆÂïèÈ°å„Å∏
    const delay = isCorrect ? 1500 : 3000;
    
    const timer = setTimeout(() => {
      nextQuestion();
    }, delay);

    return () => clearTimeout(timer);
  }, [gameState.isAnswered, gameState.selectedAnswer, gameState.questions, gameState.currentQuestion, nextQuestion]);

  // „Ç≤„Éº„É†ÁµÇ‰∫ÜÁîªÈù¢
  if (gameState.gameFinished) {
    // „Éá„Éê„ÉÉ„Ç∞Áî®Âº∑Âà∂ÁµÇ‰∫Ü„ÅÆÂ†¥Âêà„ÅØÂº∑Âà∂ÁµÇ‰∫Ü„Éá„Éº„Çø„Çí‰ΩøÁî®
    const totalQuestions = gameState.debugForceFinish?.totalQuestions || gameState.totalQuestions;
    const correctAnswers = gameState.debugForceFinish?.correctAnswers || gameState.correctAnswers;
    const correctRate = Math.round((correctAnswers / totalQuestions) * 100);
    
    // ÁµêÊûú„Å´Âøú„Åò„Åü„É°„ÉÉ„Çª„Éº„Ç∏„Å®Áß∞Âè∑
    const getResultMessage = () => {
      // Âá∫È°åÁØÑÂõ≤„Å´Âøú„Åò„Åü„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞
      const getRangeSpecificMessage = (correctRate: number) => {
        if (settings.dormitory === '„Åô„Åπ„Å¶') {
          // ÂÖ®60Âêç„ÅÆÂ†¥Âêà
          if (correctRate === 100) {
            return {
              title: "üèÜ „Éë„É¨„Éá„Éü„Ç¢Â≠¶Âúí„Éû„Çπ„Çø„Éº üèÜ",
              message: "Á¥†Êô¥„Çâ„Åó„ÅÑÔºÅ„Éë„É¨„Éá„Éü„Ç¢Â≠¶Âúí60ÂêçÂÆåÂÖ®Âà∂Ë¶á„Åß„ÅôÔºÅÁúü„ÅÆ„Éû„Çπ„Çø„Éº„Åß„ÅôÔºÅ",
              bgClass: "from-yellow-200 via-orange-200 to-pink-200",
              cardClass: "bg-gradient-to-br from-yellow-50 via-orange-50 to-pink-50 border-2 border-yellow-300/50",
              titleClass: "from-yellow-500 via-orange-500 to-pink-500",
              celebration: true
            };
          } else if (correctRate >= 90) {
            return {
              title: "üåü „Ç®„ÇØ„Çª„É¨„É≥„ÉàÔºÅ",
              message: "„Åª„ÅºÂÆåÁíß„Åß„ÅôÔºÅ„Éë„É¨„Éá„Éü„Ç¢Â≠¶Âúí„ÅÆÁü•Ë≠ò„ÅåË±äÂØå„Åß„Åô„Å≠ÔºÅ",
              bgClass: "from-purple-200 via-pink-200 to-blue-200",
              cardClass: "bg-gradient-to-br from-purple-50 via-pink-50 to-blue-50 border-2 border-purple-300/50",
              titleClass: "from-purple-500 via-pink-500 to-blue-500",
              celebration: false
            };
          }
        } else {
          // ÂêÑÂØÆ„ÅÆÂ†¥Âêà
          const dormitoryMessages = {
            '„Éê„Ç•ÂØÆ': {
              perfect: {
                title: "üé≠ „Éê„Ç•ÂØÆ„Éû„Çπ„Çø„Éº üé≠",
                message: "Á¥†Êô¥„Çâ„Åó„ÅÑÔºÅÊ≠£Áµ±Ê¥æ„Ç¢„Ç§„Éâ„É´„ÅÆÁü•Ë≠ò„ÅåÂÆåÁíß„Åß„ÅôÔºÅ",
              },
              excellent: {
                title: "üåü „Éê„Ç•ÂØÆ„Ç®„Ç≠„Çπ„Éë„Éº„ÉàÔºÅ",
                message: "„Åª„ÅºÂÆåÁíßÔºÅÊ≠£Áµ±Ê¥æ„Ç¢„Ç§„Éâ„É´„Å∏„ÅÆÊÑõ„Åå‰ºù„Çè„Çä„Åæ„ÅôÔºÅ",
              }
            },
            '„Éü„É•„Ç•ÂØÆ': {
              perfect: {
                title: "üíé „Éü„É•„Ç•ÂØÆ„Éû„Çπ„Çø„Éº üíé",
                message: "ÊúÄÈ´ò„ÇÆ„É£„É´ÔºÅ„Ç¥„Éº„Ç∏„É£„Çπ„Éª„Ç¨„Éº„É´„Ç∫„Éë„ÉØ„Éº„ÇíÂÆåÂÖ®„Éû„Çπ„Çø„ÉºÔºÅ",
              },
              excellent: {
                title: "‚ú® „Éü„É•„Ç•ÂØÆ„Ç®„Ç≠„Çπ„Éë„Éº„ÉàÔºÅ",
                message: "„Åª„ÅºÂÆåÁíßÔºÅ„ÇÆ„É£„É´„Éû„Ç§„É≥„Éâ„ÅåÁ¥†Êô¥„Çâ„Åó„ÅÑ„Åß„ÅôÔºÅ",
              }
            },
            '„ÇØ„Ç•ÂØÆ': {
              perfect: {
                title: "üéÆ „ÇØ„Ç•ÂØÆ„Éû„Çπ„Çø„Éº üéÆ",
                message: "„Éë„Éº„Éï„Çß„ÇØ„ÉàÔºÅ„Çµ„Ç§„Éê„Éº„Éë„É≥„ÇØ„Å™„Ç≤„Éº„Éü„É≥„Ç∞Áü•Ë≠ò„ÅåÂÆåÁíßÔºÅ",
              },
              excellent: {
                title: "üåü „ÇØ„Ç•ÂØÆ„Ç®„Ç≠„Çπ„Éë„Éº„ÉàÔºÅ",
                message: "„Åª„ÅºÂÆåÁíßÔºÅÁæéÊäÄÂ∑ßËÄÖ„Å™„Ç≤„Éº„Éü„É≥„Ç∞Â•≥Â≠ê„Å∏„ÅÆÊÑõ„ÅåÊ∑±„ÅÑÔºÅ",
              }
            },
            '„Ç¶„Ç£„Éã„ÉºÂØÆ': {
              perfect: {
                title: "üåπ „Ç¶„Ç£„Éã„ÉºÂØÆ„Éû„Çπ„Çø„Éº üåπ",
                message: "„Ç®„É¨„Ç¨„É≥„ÉàÔºÅ„Ç¶„Çß„Çπ„Çø„É≥„Ç¥„Ç∑„ÉÉ„ÇØ„Å™È∫ó„Åó„Åï„ÇíÂÆåÂÖ®ÁêÜËß£ÔºÅ",
              },
              excellent: {
                title: "üåü „Ç¶„Ç£„Éã„ÉºÂØÆ„Ç®„Ç≠„Çπ„Éë„Éº„ÉàÔºÅ",
                message: "„Åª„ÅºÂÆåÁíßÔºÅÂøÉ„Å´Âº∑„Åï„ÇíÁßò„ÇÅ„ÅüÂ•≥ÊÄß„Å∏„ÅÆÁêÜËß£„ÅåÊ∑±„ÅÑÔºÅ",
              }
            }
          };

          const dormMsg = dormitoryMessages[settings.dormitory as keyof typeof dormitoryMessages];
          
          if (correctRate === 100) {
            return {
              title: dormMsg.perfect.title,
              message: dormMsg.perfect.message,
              bgClass: "from-yellow-200 via-orange-200 to-pink-200",
              cardClass: "bg-gradient-to-br from-yellow-50 via-orange-50 to-pink-50 border-2 border-yellow-300/50",
              titleClass: "from-yellow-500 via-orange-500 to-pink-500",
              celebration: true
            };
          } else if (correctRate >= 90) {
            return {
              title: dormMsg.excellent.title,
              message: dormMsg.excellent.message,
              bgClass: "from-purple-200 via-pink-200 to-blue-200",
              cardClass: "bg-gradient-to-br from-purple-50 via-pink-50 to-blue-50 border-2 border-purple-300/50",
              titleClass: "from-purple-500 via-pink-500 to-blue-500",
              celebration: false
            };
          }
        }

        // ÂÖ±ÈÄö„É°„ÉÉ„Çª„Éº„Ç∏Ôºà70%‰ª•‰∏ä„ÄÅ50%‰ª•‰∏ä„ÄÅ50%Êú™Ê∫ÄÔºâ
        if (correctRate >= 70) {
          return {
            title: "‚ú® „Ç∞„É¨„Éº„ÉàÔºÅ",
            message: "ËâØ„ÅÑÁµêÊûú„Åß„ÅôÔºÅ„Åï„Çâ„Å´‰∏ä„ÇíÁõÆÊåá„Åó„Åæ„Åó„Çá„ÅÜÔºÅ",
            bgClass: "from-blue-200 via-purple-200 to-pink-200",
            cardClass: "bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 border-2 border-blue-300/50",
            titleClass: "from-blue-500 via-purple-500 to-pink-500",
            celebration: false
          };
        } else if (correctRate >= 50) {
          return {
            title: "üëç „Ç∞„ÉÉ„ÉâÔºÅ",
            message: "„Åæ„Åö„Åæ„Åö„ÅÆÁµêÊûú„Åß„ÅôÔºÅ„ÇÇ„ÅÜÂ∞ë„ÅóÈ†ëÂºµ„Çä„Åæ„Åó„Çá„ÅÜÔºÅ",
            bgClass: "from-green-200 via-blue-200 to-purple-200",
            cardClass: "bg-gradient-to-br from-green-50 via-blue-50 to-purple-50 border-2 border-green-300/50",
            titleClass: "from-green-500 via-blue-500 to-purple-500",
            celebration: false
          };
        } else {
          return {
            title: "üìö „Éï„Ç°„Ç§„ÉàÔºÅ",
            message: "„Åæ„Å†„Åæ„Å†‰º∏„Å≥„Åó„Çç„Åå„ÅÇ„Çä„Åæ„ÅôÔºÅÂæ©Áøí„Åó„Å¶ÂÜçÊåëÊà¶ÔºÅ",
            bgClass: "from-gray-200 via-blue-200 to-purple-200",
            cardClass: "bg-gradient-to-br from-gray-50 via-blue-50 to-purple-50 border-2 border-gray-300/50",
            titleClass: "from-gray-500 via-blue-500 to-purple-500",
            celebration: false
          };
        }
      };

      return getRangeSpecificMessage(correctRate);
    };

    const result = getResultMessage();
    
    // ÂØÆ„Å´Âøú„Åò„ÅüËÉåÊôØËâ≤„Å®ÊñáÂ≠óËâ≤„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞
    const getDormitoryStyle = (dormitory: string) => {
      switch (dormitory) {
        case '„Éê„Ç•ÂØÆ':
          return {
            bgClass: 'bg-gradient-to-br from-red-400 to-red-600',
            textClass: 'text-white',
            borderClass: 'border-red-500/50'
          };
        case '„Éü„É•„Ç•ÂØÆ':
          return {
            bgClass: 'bg-gradient-to-br from-pink-400 to-pink-600',
            textClass: 'text-white',
            borderClass: 'border-pink-500/50'
          };
        case '„ÇØ„Ç•ÂØÆ':
          return {
            bgClass: 'bg-gradient-to-br from-cyan-400 to-blue-500',
            textClass: 'text-white',
            borderClass: 'border-cyan-500/50'
          };
        case '„Ç¶„Ç£„Éã„ÉºÂØÆ':
          return {
            bgClass: 'bg-gradient-to-br from-green-400 to-green-600',
            textClass: 'text-white',
            borderClass: 'border-green-500/50'
          };
        case '„Åô„Åπ„Å¶':
          return {
            bgClass: 'bg-gradient-to-br from-yellow-400 to-amber-500',
            textClass: 'text-white font-black drop-shadow-lg',
            borderClass: 'border-yellow-500/50 ring-2 ring-amber-300/50'
          };
        default:
          return {
            bgClass: 'bg-gradient-to-br from-gray-400 to-gray-600',
            textClass: 'text-white',
            borderClass: 'border-gray-500/50'
          };
      }
    };

    const dormitoryStyle = getDormitoryStyle(settings.dormitory);
    
    // Èõ£ÊòìÂ∫¶„Å´Âøú„Åò„Åü„Çπ„Çø„Ç§„É´„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞
    const getDifficultyStyle = (difficulty: string) => {
      switch (difficulty) {
        case '„ÇÄ„Åö„Åã„Åó„ÅÑ':
          return {
            bgClass: 'bg-gradient-to-br from-gray-300 via-gray-400 to-gray-500',
            textClass: 'text-white font-black drop-shadow-md',
            borderClass: 'border-gray-400/50 ring-2 ring-gray-300/50 shadow-lg shadow-gray-200/50'
          };
        case 'ÂØÆÁîüÂ∞ÇÁî®':
          return {
            bgClass: 'bg-gradient-to-br from-yellow-400 via-amber-500 to-yellow-600',
            textClass: 'text-white font-black drop-shadow-lg',
            borderClass: 'border-yellow-500/50 ring-2 ring-amber-300/50 shadow-lg shadow-amber-200/50'
          };
        case '„Åµ„Å§„ÅÜ':
        default:
          return {
            bgClass: 'bg-gradient-to-br from-blue-50 to-purple-50',
            textClass: 'text-blue-700 font-black',
            borderClass: 'border-blue-200/50'
          };
      }
    };

    const difficultyStyle = getDifficultyStyle(settings.difficulty);
    
    // „Ç≤„Éº„É†„É¢„Éº„Éâ„Å´Âøú„Åò„Åü„Çπ„Çø„Ç§„É´„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞
    const getGameModeStyle = (gameMode: string) => {
      switch (gameMode) {
        case 'name':
          return {
            bgClass: 'bg-gradient-to-br from-green-400 to-emerald-500',
            textClass: 'text-white font-black',
            borderClass: 'border-green-400/50'
          };
        case 'face':
          return {
            bgClass: 'bg-gradient-to-br from-blue-400 to-blue-600',
            textClass: 'text-white font-black',
            borderClass: 'border-blue-400/50'
          };
        default:
          return {
            bgClass: 'bg-gradient-to-br from-blue-50 to-purple-50',
            textClass: 'text-blue-700 font-black',
            borderClass: 'border-blue-200/50'
          };
      }
    };

    const gameModeStyle = getGameModeStyle(settings.gameMode);
    
    return (
      <div className={`min-h-screen bg-gradient-to-br ${result.bgClass} relative overflow-hidden`}>
        {/* ÂÖ®ÂïèÊ≠£Ëß£ÊôÇ„ÅÆ„ÅäÁ•ù„ÅÑ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ */}
        {result.celebration && (
          <>
            <div className="absolute inset-0 pointer-events-none">
              <div className="absolute top-1/4 left-1/4 text-4xl animate-bounce" style={{ animationDelay: '0s' }}>üéâ</div>
              <div className="absolute top-1/3 right-1/4 text-4xl animate-bounce" style={{ animationDelay: '0.5s' }}>‚ú®</div>
              <div className="absolute bottom-1/3 left-1/3 text-4xl animate-bounce" style={{ animationDelay: '1s' }}>üåü</div>
              <div className="absolute bottom-1/4 right-1/3 text-4xl animate-bounce" style={{ animationDelay: '1.5s' }}>üéä</div>
              <div className="absolute top-1/2 left-1/6 text-4xl animate-bounce" style={{ animationDelay: '2s' }}>üí´</div>
              <div className="absolute top-1/2 right-1/6 text-4xl animate-bounce" style={{ animationDelay: '2.5s' }}>üèÜ</div>
            </div>
            {/* „Ç≠„É©„Ç≠„É©ÂäπÊûú */}
            <div className="absolute inset-0 pointer-events-none">
              <div className="absolute top-20 left-20 w-2 h-2 bg-yellow-400 rounded-full animate-ping" style={{ animationDelay: '0s' }}></div>
              <div className="absolute top-32 right-32 w-2 h-2 bg-pink-400 rounded-full animate-ping" style={{ animationDelay: '1s' }}></div>
              <div className="absolute bottom-40 left-40 w-2 h-2 bg-purple-400 rounded-full animate-ping" style={{ animationDelay: '2s' }}></div>
              <div className="absolute bottom-20 right-20 w-2 h-2 bg-orange-400 rounded-full animate-ping" style={{ animationDelay: '3s' }}></div>
            </div>
          </>
        )}

        {/* „Éê„ÉÉ„Ç∏ÂèñÂæó„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ - ÊîπÂñÑÁâà */}
        {newBadgeEarned && correctRate === 100 && (
          <div key={badgeAnimationKey} className="fixed inset-0 pointer-events-none z-50 flex items-center justify-center badge-popup-animation">
            <div className="relative">
              {/* ËÉåÊôØ„ÅÆÂÖâ„Ç®„Éï„Çß„ÇØ„Éà */}
              <div className="absolute inset-0 bg-gradient-to-r from-yellow-400 via-orange-400 to-yellow-400 rounded-full blur-2xl scale-150 opacity-30"></div>
              
              {/* „É°„Ç§„É≥„Éê„ÉÉ„Ç∏„Ç≥„É≥„ÉÜ„Éä */}
              <div className="relative bg-gradient-to-br from-white via-yellow-50 to-orange-50 rounded-3xl shadow-2xl p-8 border-4 border-yellow-400 backdrop-blur-sm">
                {/* „Ç≠„É©„Ç≠„É©„Ç®„Éï„Çß„ÇØ„Éà */}
                <div className="absolute -top-4 -left-4 text-yellow-400 text-2xl sparkle-effect">‚ú®</div>
                <div className="absolute -top-4 -right-4 text-orange-400 text-2xl sparkle-effect">‚≠ê</div>
                <div className="absolute -bottom-4 -left-4 text-pink-400 text-2xl sparkle-effect">üí´</div>
                <div className="absolute -bottom-4 -right-4 text-purple-400 text-2xl sparkle-effect">üåü</div>
                <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-yellow-300 text-3xl sparkle-effect">üíé</div>
                
                <div className="text-center">
                  <div className="text-8xl mb-6 badge-earned-animation">üèÜ</div>
                  <div className="text-3xl font-black text-transparent bg-gradient-to-r from-yellow-600 via-orange-600 to-red-600 bg-clip-text mb-4 drop-shadow-lg">
                    Êñ∞„Åó„ÅÑ„Éê„ÉÉ„Ç∏„ÇíÁç≤ÂæóÔºÅ
                  </div>
                  <div className="text-xl font-bold text-gray-700 mb-2">{settings.dormitory}</div>
                  <div className="text-lg text-gray-600">
                    {settings.difficulty === '„Åµ„Å§„ÅÜ' ? '„Éô„Éº„Ç∑„ÉÉ„ÇØ' : 
                     settings.difficulty === '„ÇÄ„Åö„Åã„Åó„ÅÑ' ? '„Ç¢„Éâ„Éê„É≥„Çπ' : 
                     '„Éû„Çπ„Çø„Éº'}
                  </div>
                  
                  {/* „Éê„ÉÉ„Ç∏„ÅÆÁ®ÆÈ°û„Å´Âøú„Åò„ÅüÁâπÂà•„É°„ÉÉ„Çª„Éº„Ç∏ */}
                  <div className="mt-4 px-6 py-3 bg-gradient-to-r from-yellow-400 to-orange-400 rounded-full">
                    <span className="text-white font-black text-lg drop-shadow-md">
                      {settings.difficulty === 'ÂØÆÁîüÂ∞ÇÁî®' && 'üëë Èáë„Éê„ÉÉ„Ç∏Áç≤ÂæóÔºÅ'}
                      {settings.difficulty === '„ÇÄ„Åö„Åã„Åó„ÅÑ' && '‚ö° ÈäÄ„Éê„ÉÉ„Ç∏Áç≤ÂæóÔºÅ'}
                      {settings.difficulty === '„Åµ„Å§„ÅÜ' && 'üéñÔ∏è ÈäÖ„Éê„ÉÉ„Ç∏Áç≤ÂæóÔºÅ'}
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* „Ç≤„Éº„É†„Çø„Ç§„Éà„É´ */}
        <div className="text-center py-6 px-4">
          <h1 className="text-3xl md:text-4xl font-black font-rounded bg-gradient-to-r from-pink-500 via-purple-500 to-blue-500 bg-clip-text text-transparent mb-2 text-shadow-soft">
            „Éë„É¨„ÇØ„Ç§„Ç∫
          </h1>
          <p className="text-base md:text-lg text-gray-600 font-medium font-elegant">
            ÔΩû„ÇÅ„Åñ„ÅõÔºÅ„Éë„É¨„Éá„Éü„Ç¢Â≠¶Âúí60ÂêçÂÆåÂÖ®„Éû„Çπ„Çø„ÉºÔºÅÔΩû
          </p>
        </div>

        {/* „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ */}
        <div className="flex items-center justify-center px-4 pb-8">
          <div className={`${result.cardClass} backdrop-blur-sm rounded-3xl shadow-2xl p-6 md:p-8 max-w-2xl w-full transform ${result.celebration ? 'shadow-3xl border-4 border-yellow-400/50' : ''}`}>
            <div className="text-center space-y-6">
              {/* ÁµêÊûú„Çø„Ç§„Éà„É´ */}
              <div className="space-y-2">
                <h2 className={`text-xl md:text-2xl lg:text-3xl xl:text-4xl font-black font-rounded bg-gradient-to-r ${result.titleClass} bg-clip-text text-transparent text-shadow-soft leading-tight ${result.celebration ? 'animate-bounce drop-shadow-lg' : ''}`}>
                  {result.title}
                </h2>
                <p className="text-sm md:text-base lg:text-lg text-gray-700 font-medium font-elegant leading-relaxed">
                  {result.message}
                </p>
              </div>
              
              {/* Ê≠£Ëß£ÁéáÔºàÂ§ß„Åç„ÅèË°®Á§∫Ôºâ}
              <div className={`bg-white/90 backdrop-blur-sm p-6 rounded-2xl border-2 border-gray-200 shadow-lg ${result.celebration ? 'shadow-xl border-yellow-300 bg-gradient-to-br from-yellow-50 to-orange-50' : ''}`}>
                <div className={`text-6xl md:text-7xl font-black bg-gradient-to-r ${result.titleClass} bg-clip-text text-transparent ${result.celebration ? 'drop-shadow-md' : ''}`}>
                  {correctRate}%
                </div>
                <div className="text-lg text-gray-700 font-bold mt-2">Ê≠£Ëß£Áéá</div>
              </div>
              
              {/* Ë©≥Á¥∞ÁµêÊûú */}
              <div className="grid grid-cols-2 gap-4">
                <div className="bg-emerald-50 p-4 rounded-xl border border-emerald-200">
                  <div className="text-3xl font-black text-emerald-600">{correctAnswers}</div>
                  <div className="text-sm text-emerald-700 font-bold">Ê≠£Ëß£Êï∞</div>
                </div>
                <div className="bg-rose-50 p-4 rounded-xl border border-rose-200">
                  <div className="text-3xl font-black text-rose-600">
                    {totalQuestions - correctAnswers}
                  </div>
                  <div className="text-sm text-rose-700 font-bold">‰∏çÊ≠£Ëß£Êï∞</div>
                </div>
              </div>
              
              {/* „Ç≤„Éº„É†Ë®≠ÂÆöË°®Á§∫ */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                <div className={`${dormitoryStyle.bgClass} p-3 rounded-xl border-2 ${dormitoryStyle.borderClass} ${settings.dormitory === '„Åô„Åπ„Å¶' ? 'shadow-lg shadow-amber-200/50' : ''}`}>
                  <div className={`text-xs ${dormitoryStyle.textClass} font-bold mb-1 ${settings.dormitory === '„Åô„Åπ„Å¶' ? 'drop-shadow-md' : ''}`}>Âá∫È°åÁØÑÂõ≤</div>
                  <div className={`text-sm font-black ${dormitoryStyle.textClass} ${settings.dormitory === '„Åô„Åπ„Å¶' ? 'drop-shadow-md' : ''}`}>
                    {settings.dormitory}
                    {settings.dormitory === '„Åô„Åπ„Å¶' && <span className="ml-1">‚ú®</span>}
                  </div>
                </div>
                <div className={`${gameModeStyle.bgClass} p-3 rounded-xl border-2 ${gameModeStyle.borderClass}`}>
                  <div className={`text-xs ${gameModeStyle.textClass} mb-1`}>„Ç≤„Éº„É†„É¢„Éº„Éâ</div>
                  <div className={`text-sm ${gameModeStyle.textClass}`}>
                    {settings.gameMode === 'name' ? 'ÂêçÂâçÂΩì„Å¶' : 'È°îÂΩì„Å¶'}
                  </div>
                </div>
                <div className={`${difficultyStyle.bgClass} p-3 rounded-xl border-2 ${difficultyStyle.borderClass}`}>
                  <div className={`text-xs ${difficultyStyle.textClass} mb-1 ${settings.difficulty === 'ÂØÆÁîüÂ∞ÇÁî®' ? 'drop-shadow-md' : settings.difficulty === '„ÇÄ„Åö„Åã„Åó„ÅÑ' ? 'drop-shadow-sm' : 'font-bold'}`}>Èõ£ÊòìÂ∫¶</div>
                  <div className={`text-sm ${difficultyStyle.textClass} ${settings.difficulty === 'ÂØÆÁîüÂ∞ÇÁî®' ? 'drop-shadow-md' : settings.difficulty === '„ÇÄ„Åö„Åã„Åó„ÅÑ' ? 'drop-shadow-sm' : ''}`}>
                    {settings.difficulty}
                    {settings.difficulty === 'ÂØÆÁîüÂ∞ÇÁî®' && <span className="ml-1">üëë</span>}
                    {settings.difficulty === '„ÇÄ„Åö„Åã„Åó„ÅÑ' && <span className="ml-1">‚ö°</span>}
                  </div>
                </div>
              </div>
              
              {/* „Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 pt-4">
                <button
                  onClick={restartGame}
                  className="w-full px-6 py-3 bg-gradient-to-r from-gray-400 to-gray-500 text-white font-bold font-rounded text-base rounded-xl shadow-md hover:shadow-lg transition-all duration-300 hover:scale-105 active:scale-95 hover:from-gray-500 hover:to-gray-600"
                >
                  üîÑ „É™„Éà„É©„Ç§
                </button>
                <button
                  onClick={onBackToTitle}
                  className="w-full px-6 py-3 bg-gradient-to-r from-gray-300 to-gray-400 text-gray-700 font-bold font-rounded text-base rounded-xl shadow-md hover:shadow-lg transition-all duration-300 hover:scale-105 active:scale-95 hover:from-gray-400 hover:to-gray-500 hover:text-white"
                >
                  üè† „Çø„Ç§„Éà„É´„Å´Êàª„Çã
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // ÂïèÈ°å„ÅåÊú™ÁîüÊàê„ÅÆÂ†¥Âêà
  if (gameState.questions.length === 0) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-pink-100 via-purple-50 to-blue-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-500 mx-auto mb-4"></div>
          <p className="text-gray-600">ÂïèÈ°å„ÇíÊ∫ñÂÇô‰∏≠...</p>
        </div>
      </div>
    );
  }

  const currentQuestion = gameState.questions[gameState.currentQuestion];

  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-100 via-purple-50 to-blue-100">
      {/* „Çø„Ç§„Éà„É´„Å´Êàª„Çã„Éú„Çø„É≥ - Â∑¶‰∏äÂõ∫ÂÆö */}
      <button
        onClick={onBackToTitle}
        className="fixed top-4 left-4 z-10 lg:px-3 lg:py-2 lg:bg-white/90 lg:backdrop-blur-sm lg:rounded-lg lg:shadow-md lg:text-gray-700 lg:font-medium lg:font-rounded lg:hover:bg-white lg:transition-all lg:duration-200 lg:text-sm w-12 h-12 lg:w-auto lg:h-auto bg-white/90 backdrop-blur-sm rounded-full shadow-md hover:shadow-lg transition-all duration-200 hover:scale-110 active:scale-95 border border-white/50 flex items-center justify-center lg:inline-flex text-gray-700 hover:text-purple-600"
      >
        <span className="lg:hidden text-xl">‚Üê</span>
        <span className="hidden lg:inline">„Çø„Ç§„Éà„É´„Å´Êàª„Çã</span>
      </button>

      {/* „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ */}
      <div className="min-h-screen flex flex-col p-2 md:p-4">
        {/* „Ç≤„Éº„É†„Çø„Ç§„Éà„É´ */}
        <div className="text-center py-2 md:py-4 relative">
          <h1 className="text-xl md:text-3xl font-black font-rounded bg-gradient-to-r from-pink-500 via-purple-500 to-blue-500 bg-clip-text text-transparent">
            „Éë„É¨„ÇØ„Ç§„Ç∫
          </h1>
          <p className="text-sm text-gray-600 font-medium font-elegant hidden lg:block">
            ÔΩû„ÇÅ„Åñ„ÅõÔºÅ„Éë„É¨„Éá„Éü„Ç¢Â≠¶Âúí60ÂêçÂÆåÂÖ®„Éû„Çπ„Çø„ÉºÔºÅÔΩû
          </p>
          
          {/* „É¢„Éê„Ç§„É´Áî®„ÅÆÂïèÈ°åÊï∞Ë°®Á§∫ - „Çø„Ç§„Éà„É´Âè≥„Å´ÈÖçÁΩÆ */}
          <div className="absolute top-1/2 right-0 transform -translate-y-1/2 lg:hidden">
            <span className="text-xs font-medium font-rounded text-gray-600 bg-white/60 backdrop-blur-sm px-3 py-1 rounded-full shadow-sm">
              {gameState.currentQuestion + 1}/{gameState.totalQuestions}
            </span>
          </div>
        </div>

        {/* „Éò„ÉÉ„ÉÄ„Éº - „Éó„É≠„Ç∞„É¨„Çπ„Éê„Éº„ÅÆ„Åø */}
        <header className="mb-4 md:mb-6 hidden lg:block">
          <div className="bg-white/80 backdrop-blur-sm rounded-lg shadow-md p-4 max-w-4xl mx-auto w-full">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium font-rounded text-gray-600">
                ÂïèÈ°å {gameState.currentQuestion + 1} / {gameState.totalQuestions}
              </span>
              <span className="text-sm font-medium font-rounded text-gray-600">
                Èõ£ÊòìÂ∫¶: {settings.difficulty}
              </span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-3">
              <div 
                className="bg-gradient-to-r from-purple-500 to-blue-500 h-3 rounded-full transition-all duration-500 ease-out"
                style={{ 
                  width: `${((gameState.currentQuestion + 1) / gameState.totalQuestions) * 100}%` 
                }}
              ></div>
            </div>
          </div>
        </header>

        {/* „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Ç®„É™„Ç¢ */}
        <div className="flex-1 max-w-4xl mx-auto w-full pb-1 md:pb-4">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-2 md:gap-6 h-full">
            {/* ÂïèÈ°åË°®Á§∫„Ç®„É™„Ç¢ */}
            <div className="flex flex-col">
              <QuestionDisplay
                talent={currentQuestion.correctTalent}
                gameMode={settings.gameMode}
                isAdvancedMode={isAdvancedMode}
                isAnswered={gameState.isAnswered}
              />
            </div>

            {/* ÂõûÁ≠îÈÅ∏ÊäûËÇ¢„Ç®„É™„Ç¢ */}
            <div className="flex flex-col">
              <div className="bg-white/90 backdrop-blur-sm rounded-2xl shadow-lg p-1 md:p-6 border border-white/50 flex-1 min-h-0">
                <h3 className="text-lg font-bold font-rounded text-gray-800 mb-2 md:mb-4 hidden lg:block">ÈÅ∏ÊäûËÇ¢</h3>
                <div className="h-full overflow-y-auto">
                  <AnswerOptions
                    options={currentQuestion.options}
                    correctTalent={currentQuestion.correctTalent}
                    gameMode={settings.gameMode}
                    selectedAnswer={gameState.selectedAnswer}
                    isAnswered={gameState.isAnswered}
                    onAnswer={answerQuestion}
                    isAdvancedMode={isAdvancedMode}
                  />
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Ê¨°„Å∏„Éú„Çø„É≥„ÅØÂâäÈô§ */}
      </div>
    </div>
  );
};
